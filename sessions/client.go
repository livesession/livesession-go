// This file was auto-generated by Fern from our API Definition.

package sessions

import (
	context "context"
	livesessiongo "go.livesession.io/livesession-go"
	core "go.livesession.io/livesession-go/core"
	internal "go.livesession.io/livesession-go/internal"
	option "go.livesession.io/livesession-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// ---
// title: List sessions
// group: [ENDPOINTS]
// ---
//
// List of all sessions
func (c *Client) GetSessions(
	ctx context.Context,
	request *livesessiongo.GetSessionsRequest,
	opts ...option.RequestOption,
) (*livesessiongo.GetListSessionsResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.livesession.io/v1",
	)
	endpointURL := baseURL + "/sessions"
	queryParams, err := internal.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		400: func(apiError *core.APIError) error {
			return &livesessiongo.BadRequestError{
				APIError: apiError,
			}
		},
		500: func(apiError *core.APIError) error {
			return &livesessiongo.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *livesessiongo.GetListSessionsResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
