// This file was auto-generated by Fern from our API Definition.

package livesession

import (
	json "encoding/json"
	fmt "fmt"
	internal "go.livesession.io/livesession-go/internal"
)

type AlertCreate struct {
	// Name of the alert for easy identification
	Name string `json:"name" url:"-"`
	// List of events that will trigger the alert
	Events []*AlertEvent `json:"events,omitempty" url:"-"`
	// Notification provider for the alert, `slack` or `webhooks`
	Provider AlertProviderEnum `json:"provider" url:"-"`
	// Slack channel ID where notifications will be sent (required if provider is `slack`)
	SlackChannelId *string `json:"slack_channel_id,omitempty" url:"-"`
	// Webhook ID where notifications will be sent (required if provider is `webhooks`)
	WebhookId *string `json:"webhook_id,omitempty" url:"-"`
}

type Alert struct {
	// Unique identifier for the alert
	AlertId *string `json:"alert_id,omitempty" url:"alert_id,omitempty"`
	// Name of the alert
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// List of events that trigger the alert
	Events []*AlertEvent `json:"events,omitempty" url:"events,omitempty"`
	// Notification provider for the alert
	Provider *AlertProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`
	// Slack channel ID for notifications
	SlackChannelId *string `json:"slack_channel_id,omitempty" url:"slack_channel_id,omitempty"`
	// Webhook ID for notifications
	WebhookId *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`
	// Whether the alert is currently active
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp when the alert was created
	CreationDate *string `json:"creation_date,omitempty" url:"creation_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Alert) GetAlertId() *string {
	if a == nil {
		return nil
	}
	return a.AlertId
}

func (a *Alert) GetName() *string {
	if a == nil {
		return nil
	}
	return a.Name
}

func (a *Alert) GetEvents() []*AlertEvent {
	if a == nil {
		return nil
	}
	return a.Events
}

func (a *Alert) GetProvider() *AlertProviderEnum {
	if a == nil {
		return nil
	}
	return a.Provider
}

func (a *Alert) GetSlackChannelId() *string {
	if a == nil {
		return nil
	}
	return a.SlackChannelId
}

func (a *Alert) GetWebhookId() *string {
	if a == nil {
		return nil
	}
	return a.WebhookId
}

func (a *Alert) GetEnabled() *bool {
	if a == nil {
		return nil
	}
	return a.Enabled
}

func (a *Alert) GetCreationDate() *string {
	if a == nil {
		return nil
	}
	return a.CreationDate
}

func (a *Alert) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Alert) UnmarshalJSON(data []byte) error {
	type unmarshaler Alert
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Alert(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Alert) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AlertEvent struct {
	// Kind of event, more info [here](/docs/api/rest/EventKind)
	Kind *int `json:"kind,omitempty" url:"kind,omitempty"`
	// Value or threshold that triggers the alert
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AlertEvent) GetKind() *int {
	if a == nil {
		return nil
	}
	return a.Kind
}

func (a *AlertEvent) GetValue() *string {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AlertEvent) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AlertEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler AlertEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AlertEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AlertEvent) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Available notification providers for alerts
type AlertProviderEnum string

const (
	AlertProviderEnumSlack    AlertProviderEnum = "slack"
	AlertProviderEnumWebhooks AlertProviderEnum = "webhooks"
)

func NewAlertProviderEnumFromString(s string) (AlertProviderEnum, error) {
	switch s {
	case "slack":
		return AlertProviderEnumSlack, nil
	case "webhooks":
		return AlertProviderEnumWebhooks, nil
	}
	var t AlertProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AlertProviderEnum) Ptr() *AlertProviderEnum {
	return &a
}

type AlertsDeleteResponse struct {
	// ID of the alert that was deleted
	AlertId *string `json:"alert_id,omitempty" url:"alert_id,omitempty"`
	// Indicates whether the alert was successfully deleted
	Deleted *bool `json:"deleted,omitempty" url:"deleted,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AlertsDeleteResponse) GetAlertId() *string {
	if a == nil {
		return nil
	}
	return a.AlertId
}

func (a *AlertsDeleteResponse) GetDeleted() *bool {
	if a == nil {
		return nil
	}
	return a.Deleted
}

func (a *AlertsDeleteResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AlertsDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AlertsDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AlertsDeleteResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AlertsDeleteResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AlertUpdate struct {
	// New name for the alert
	Name *string `json:"name,omitempty" url:"-"`
	// Updated list of events that will trigger the alert
	Events []*AlertEvent `json:"events,omitempty" url:"-"`
	// Updated notification provider for the alert
	Provider *AlertProviderEnum `json:"provider,omitempty" url:"-"`
	// Updated Slack channel ID for notifications
	SlackChannelId *string `json:"slack_channel_id,omitempty" url:"-"`
	// Updated webhook ID for notifications
	WebhookId *string `json:"webhook_id,omitempty" url:"-"`
}
