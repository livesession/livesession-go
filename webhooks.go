// This file was auto-generated by Fern from our API Definition.

package livesession

import (
	json "encoding/json"
	fmt "fmt"
	internal "go.livesession.io/livesession-go/internal"
)

type WebhookCreate struct {
	// URL for the webhook
	Url string `json:"url" url:"-"`
	// Website ID
	WebsiteId string `json:"website_id" url:"-"`
	// API version (e.g., v1.0)
	Version string `json:"version" url:"-"`
}

type Webhook struct {
	// Webhook ID
	WebhookId *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`
	// URL for the webhook
	Url *string `json:"url,omitempty" url:"url,omitempty"`
	// Website name
	Website *string `json:"website,omitempty" url:"website,omitempty"`
	// Website ID
	WebsiteId *string `json:"website_id,omitempty" url:"website_id,omitempty"`
	// API version
	Version *string `json:"version,omitempty" url:"version,omitempty"`
	// Webhook enabled status
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Unix timestamp for creation date
	CreatedDate *int64 `json:"created_date,omitempty" url:"created_date,omitempty"`
	// Creator of the webhook
	CreatedBy *string `json:"created_by,omitempty" url:"created_by,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *Webhook) GetWebhookId() *string {
	if w == nil {
		return nil
	}
	return w.WebhookId
}

func (w *Webhook) GetUrl() *string {
	if w == nil {
		return nil
	}
	return w.Url
}

func (w *Webhook) GetWebsite() *string {
	if w == nil {
		return nil
	}
	return w.Website
}

func (w *Webhook) GetWebsiteId() *string {
	if w == nil {
		return nil
	}
	return w.WebsiteId
}

func (w *Webhook) GetVersion() *string {
	if w == nil {
		return nil
	}
	return w.Version
}

func (w *Webhook) GetEnabled() *bool {
	if w == nil {
		return nil
	}
	return w.Enabled
}

func (w *Webhook) GetCreatedDate() *int64 {
	if w == nil {
		return nil
	}
	return w.CreatedDate
}

func (w *Webhook) GetCreatedBy() *string {
	if w == nil {
		return nil
	}
	return w.CreatedBy
}

func (w *Webhook) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *Webhook) UnmarshalJSON(data []byte) error {
	type unmarshaler Webhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Webhook(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *Webhook) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookDeleted struct {
	// Webhook ID
	WebhookId *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`
	// Indicates if the webhook was deleted
	Deleted *bool `json:"deleted,omitempty" url:"deleted,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookDeleted) GetWebhookId() *string {
	if w == nil {
		return nil
	}
	return w.WebhookId
}

func (w *WebhookDeleted) GetDeleted() *bool {
	if w == nil {
		return nil
	}
	return w.Deleted
}

func (w *WebhookDeleted) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookDeleted) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookDeleted
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookDeleted(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookDeleted) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookUpdate struct {
	// API version
	// URL for the webhook
	Url string `json:"url" url:"-"`
	// Website ID
	WebsiteId string `json:"website_id" url:"-"`
	// API version (e.g., v1.0)
	WebhookUpdateVersion string `json:"version" url:"-"`
	version              string
}

func (w *WebhookUpdate) Version() string {
	return w.version
}

func (w *WebhookUpdate) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookUpdate
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*w = WebhookUpdate(body)
	w.version = "v1.0"
	return nil
}

func (w *WebhookUpdate) MarshalJSON() ([]byte, error) {
	type embed WebhookUpdate
	var marshaler = struct {
		embed
		Version string `json:"version"`
	}{
		embed:   embed(*w),
		Version: "v1.0",
	}
	return json.Marshal(marshaler)
}
